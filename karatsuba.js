let m1 = 3141592653589793238462643383279502884197169399375105820974944592;
let m2 = 2718281828459045235360287471352662497757247093699959574966967627;

let n1 = 1024;
let n2 = 2048;

const calcualteLength =  ( n)  => {
    let count =0;
    while (n > 0) {
        count++;
        n = n/BigInt(10);
        if(n<1) break;
    }
    return count;
}



const mult = (x, y) => {
    if( x== 0 || y == 0) return 0;
    
    // let nx = calcualteLength(x);
    // let ny = calcualteLength(y);
    let nx = x.toString().length;
    let ny =  y.toString().length;

    let n = Math.max(nx, ny);
    if( n = 1 ) return x*y;

    if( nx < ny ) {
        console.log('not equal length', nx, ny);

    }
    
    // if(nx != ny) {
    //     console.log('-------------------------not equal length')
    // }

    console.log('n,x,y',n,x,y);

    // let paddingCount = 0;


    // if( nx %2 != 0) {
    //     x = x * BigInt(10);
    //     paddingCount++;
    //     nx++;
    // }
    
    // if( ny %2 !=0) {
    //     y = y *BigInt(10);
    //     paddingCount++;
    //     ny++;



    let a = BigInt((x/(BigInt(10) ** BigInt(n/2))));
    let b =BigInt( BigInt(x) - (a * BigInt(BigInt(10) ** BigInt(n/2)) ));//unnecessary BigInt

    let c = BigInt((y/(BigInt(10) ** BigInt(n/2))));

    let d = BigInt((y - (c * BigInt(10 ** (n/2)))));
    console.log('abcd=', a,b,c,d);


    let result = (BigInt(10 ** n ) * mult(a,c)) + BigInt(BigInt(10 ** (n/2)) * BigInt(BigInt(mult(a,d)) + BigInt( mult(b,c)))) + BigInt(mult(b,d)); 
    console.log(`result of ${x} ${y}`,result);

    // if( paddingCount) {
    //     result /= BigInt(10 ** paddingCount)
    // }
    return result;
}
    // console.log(a,b,c,d);
// const answer = mult(2232345121,2623789121);

const answer = mult(BigInt(n1), BigInt(n2));



//8,539,734,222,673,566,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
//8539734222673566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//8539734222673566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//8539734222673566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//'8539734222673567143831944056453630612218016538782105147427095380765301779103346028763080360925993065714475378497400474227965952'
//8539734222673568132630552817124543303384443810782743410108121461153273869248724694809717341559380988311547488086466295603658752
//8539734222673566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
//85397342226735671438319440564536306122180165387821â€¦028763080360925993065714475378497400474227965952
//8539734222673567143831944056453630612218016538782105147427095380765301779103346028763080360925993065714475378497400474227965952
//8539734222673566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

console.log( answer.toLocaleString('fullwide', {useGrouping:false}) );

// console.log(calcualteLength(8539734222673566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000));
    //8539734222673565727722948056719317944556312698501627377409191379033726264982769845827675624200334881483773142083314390902243328

    //8539734222673568000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000